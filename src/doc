/**
 * Represents a map in a game with specific coordinates for key items and locations such as a key, door,
 * armor, and health pack. Provides methods to determine player interactions with these items and locations,
 * as well as random encounter mechanics.
 */
public class Map {

    // Coordinates for the key location
    private final int keyX;
    private final int keyY;

    // Coordinates for the door location
    private final int doorX;
    private final int doorY;

    // Coordinates for the armor location
    private final int armourX;
    private final int armourY;

    // Coordinates for the health pack location
    private final int healthX;
    private final int healthY;

    /**
     * Constructs a new Map with specified coordinates for key items and locations.
     *
     * @param keyX     the x-coordinate of the key
     * @param keyY     the y-coordinate of the key
     * @param doorX    the x-coordinate of the door
     * @param doorY    the y-coordinate of the door
     * @param armourX  the x-coordinate of the armor
     * @param armourY  the y-coordinate of the armor
     * @param healthX  the x-coordinate of the health pack
     * @param healthY  the y-coordinate of the health pack
     */
    public Map(int keyX, int keyY, int doorX, int doorY, int armourX, int armourY, int healthX, int healthY) {
        this.keyX = keyX;
        this.keyY = keyY;
        this.doorX = doorX;
        this.doorY = doorY;
        this.armourX = armourX;
        this.armourY = armourY;
        this.healthX = healthX;
        this.healthY = healthY;
    }

    /**
     * Generates a random encounter chance.
     *
     * @return a random integer between 1 and 99 (inclusive).
     */
    public int encounterChance() {
        return (int) (Math.random() * 99) + 1;
    }

    /**
     * Simulates a random encounter.
     *
     * @return a random integer between 1 and 3 (inclusive), representing different types of encounters.
     */
    public int randomEncounter() {
        return (int) (Math.random() * 3) + 1;
    }

    /**
     * Checks if the player is on the key location.
     *
     * @param playerX the player's x-coordinate
     * @param playerY the player's y-coordinate
     * @return true if the player is on the key location, false otherwise.
     */
    public boolean isOnKey(int playerX, int playerY) {
        return (playerX == keyX) && (playerY == keyY);
    }

    /**
     * Checks if the player is on the door location.
     *
     * @param playerX the player's x-coordinate
     * @param playerY the player's y-coordinate
     * @return true if the player is on the door location, false otherwise.
     */
    public boolean isOnDoor(int playerX, int playerY) {
        return (playerX == doorX) && (playerY == doorY);
    }

    /**
     * Checks if the player is on the armor location.
     *
     * @param playerX the player's x-coordinate
     * @param playerY the player's y-coordinate
     * @return true if the player is on the armor location, false otherwise.
     */
    public boolean isOnArmour(int playerX, int playerY) {
        return (playerX == armourX) && (playerY == armourY);
    }

    /**
     * Checks if the player is on the health pack location.
     *
     * @param playerX the player's x-coordinate
     * @param playerY the player's y-coordinate
     * @return true if the player is on the health pack location, false otherwise.
     */
    public boolean isOnHealth(int playerX, int playerY) {
        return (playerX == healthX) && (playerY == healthY);
    }
}








/**
 * Represents a player in the game with attributes such as health, strength, speed, level, and defense.
 * Provides methods to simulate interactions like taking damage, dealing damage, leveling up, and modifying stats.
 */
public class Player {
    private double health;
    private double strong; // Represents the player's strength
    private double speed;  // Represents the player's speed
    private double level;  // Represents the player's level
    private double defense; // Represents the player's defense value

    /**
     * Constructs a new Player with specified attributes.
     *
     * @param health   //the player's health
     * @param strong   //the player's strength
     * @param speed    //the player's speed
     * @param level    //the player's level
     * @param defense  //the player's defense value
     */
    public Player(double health, double strong, double speed, double level, double defense) {
        this.health = health;
        this.strong = strong;
        this.speed = speed;
        this.level = level;
        this.defense = defense;
    }

    /**
     * Calculates the damage taken by the player after accounting for their defense.
     *
     * @param enemyHit the raw damage dealt by the enemy
     * @return the net damage taken by the player
     */
    public double takeDamage(double enemyHit) {
        return enemyHit - defense;
    }

    /**
     * Calculates the damage dealt by the player to an enemy after considering the enemy's defense.
     *
     * @param playerHit    the raw damage dealt by the player
     * @param enemyDefense the enemy's defense value
     * @return the net damage dealt to the enemy
     */
    public double dealDamage(double playerHit, double enemyDefense) {
        return playerHit - enemyDefense;
    }

    /**
     * Modifies the player's health by a given amount. Health cannot exceed 100.
     *
     * @param change the amount to adjust the player's health by (positive or negative)
     */
    public void changeHealth(double change) {
        this.health += change;
        if (this.health > 100) {
            this.health = 100; // Cap health at 100
        }
    }

    /**
     * Adds armor to the player, increasing their defense value.
     */
    public void getArmour() {
        defense += 30;
    }

    /**
     * Levels up the player, increasing all attributes by a set amount.
     */
    public void levelUp() {
        health += 2;
        speed += 2;
        strong += 2;
        level += 2;
        defense += 2;
    }

    /**
     * Gets the player's current health value.
     *
     * @return the player's health
     */
    public double getHealth() {
        return health;
    }

    /**
     * Gets the player's current strength value.
     *
     * @return the player's strength
     */
    public double getStrong() {
        return strong;
    }

    /**
     * Gets the player's current speed value.
     *
     * @return the player's speed
     */
    public double getSpeed() {
        return speed;
    }

    /**
     * Gets the player's current level.
     *
     * @return the player's level
     */
    public double getLevel() {
        return level;
    }

    /**
     * Gets the player's current defense value.
     *
     * @return the player's defense
     */
    public double getDefense() {
        return defense;
    }

    /**
     * Ensures a given value is clamped between a minimum and maximum range.
     *
     * @param value the value to be clamped
     * @param min   the minimum allowable value
     * @param max   the maximum allowable value
     * @return the clamped value
     */
    public static int fixValue(int value, int min, int max) {
        if (value > max) return max;
        if (value < min) return min;
        return value;
    }
}
